#version 450
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0, rgba32f) uniform readonly image2DMS inWorldPos;
layout (binding = 1, rgba32f) uniform readonly image2DMS inAlbedo;
layout (binding = 2, rgba32f) uniform readonly image2DMS inNormal;
layout (binding = 3, rgba32f) uniform readonly image2DMS inRoughnessMetalAO;
layout (binding = 4, rgba8) uniform readonly image2D inShadowMask;
layout (binding = 5, rgba8) uniform readonly image2D inHUD;
layout (binding = 6, rgba8) uniform readonly image2D inAO;
layout (binding = 7, rgba8) uniform image2D resultImage;

layout(binding = 8, std140) uniform readonly UniformBufferObjectLighting
{
	vec4 cameraPosition;

	vec4 directionDirectionalLight;
	vec4 colorDirectionalLight;
} uboLighting;

layout(binding = 9, std140) uniform readonly UniformBufferObjectParams
{
	uint drawHUD;
    uint drawShadows;
    uint sampleCount;
    uint useAO;
} uboParams;

float DistributionGGX(vec3 N, vec3 H, float roughness);
float GeometrySchlickGGX(float NdotV, float roughness);
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness);
vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness);

const float PI = 3.14159265359;

void main()
{
    vec3 colors[8];
    vec3 colorSum = vec3(0.0);
    for(int i = 0; i < uboParams.sampleCount; ++i)
    {
        vec3 albedo = imageLoad(inAlbedo, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), i).rgb;
        vec3 normal = imageLoad(inNormal, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), i).rgb;
        vec3 worldPos = imageLoad(inWorldPos, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), i).rgb;
        float roughness = imageLoad(inRoughnessMetalAO, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), i).r;
        float metallic = imageLoad(inRoughnessMetalAO, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), i).g;
        float ambientOcclusion = imageLoad(inRoughnessMetalAO, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), i).b;
        float aoCalculated = imageLoad(inAO, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).r;

        vec3 V = normalize(-worldPos);
        vec3 R = reflect(-V, normal);

        vec3 F0 = vec3(0.04);
        F0 = mix(F0,albedo, metallic);

        vec3 Lo = vec3(0.0);

        // calculate per-light radiance
        vec3 L = normalize(-uboLighting.directionDirectionalLight.xyz);
        vec3 H = normalize(V + L);
        vec3 radiance = uboLighting.colorDirectionalLight.xyz;

        // cook-torrance brdf
        float NDF = DistributionGGX(normal, H, roughness);
        float G   = GeometrySmith(normal, V, L, roughness);
        vec3 F    = fresnelSchlickRoughness(max(dot(H, V), 0.0), F0, roughness);

        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic;

        vec3 nominator    = NDF * G * F;
        float denominator = 4 * max(dot(normal, V), 0.0) * max(dot(normal, L), 0.0);
        vec3 specular     = nominator / max(denominator, 0.001);

        // add to outgoing radiance Lo
        float NdotL = max(dot(normal, L), 0.0);
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;

        vec3 ambient = vec3(0.0) * albedo;

        if(uboParams.useAO == 1)
            ambient = aoCalculated * albedo * 0.15;
        else
            ambient = albedo * 0.15;

        if(uboParams.drawShadows == 1)
        {
            vec3 shadowMask = imageLoad(inShadowMask, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgb;
            Lo *= shadowMask.r;
        }

        colors[i] = ambient + Lo;

        float exposure = 0.35;
        colors[i] = vec3(1.0) - exp(-colors[i] * exposure);
        colors[i] = pow(colors[i], vec3(1.0 / 2.2));

        colorSum += colors[i];
    }

    vec3 color = colorSum / uboParams.sampleCount;

    if(uboParams.drawHUD == 1)
    {
        vec4 hud = imageLoad(inHUD, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y)).rgba;
        color = color * (1.0 - hud.a) + hud.rgb * hud.a; 
    }

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
}

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
	return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}
